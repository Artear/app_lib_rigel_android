buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath lib.plugin.bintray
        classpath lib.plugin.dcendents
        classpath lib.plugin.dokka
    }
}

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.github.ben-manes.versions' version '0.22.0'
}

ext {
    bintrayRepo = 'Android'
    bintrayName = 'Rigel'

    publishedGroupId = 'com.artear.rigel'
    libraryName = 'Rigel'
    artifact = 'rigel'

    libraryDescription = 'An android library useful for common bottom navigation, making easier ' +
            'the launch of fragments, and manipulation of back stack.'

    siteUrl = 'https://github.com/Artear/app_lib_rigel_android'
    gitUrl = 'https://github.com/Artear/app_lib_rigel_android.git'

    developerId = 'artear'
    developerName = 'Artear Moviles'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

}

static int getVersionCode(branch) {
    def versionCodeCommand = "git rev-list --count " + branch
    return versionCodeCommand.execute().text.trim().toInteger()
}

static def getBranchName() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

android {
    compileSdkVersion buildVersions.targetSdk
    buildToolsVersion buildVersions.buildTools

    def branch = getBranchName()
    def vCode = 0 + getVersionCode(branch)
    def vMinSdkVersion = buildVersions.minSdk

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.getName()}-${defaultConfig.versionName}-${variant.name}.aar"
        }
    }

    defaultConfig {
        minSdkVersion vMinSdkVersion
        targetSdkVersion buildVersions.targetSdk
        versionCode vCode
        versionName libraryVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {


        debug {
            vMinSdkVersion = buildVersions.debug.minSdk
            vCode = 1
            debuggable true
            zipAlignEnabled false
            minifyEnabled false
        }

        release {
            vMinSdkVersion = buildVersions.minSdk
            vCode = 1 + getVersionCode(branch)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Test
    testImplementation lib.junit.library
    androidTestImplementation lib.androidx.testCore
    androidTestImplementation lib.androidx.extJunit
    androidTestImplementation lib.androidx.testRunner
    androidTestImplementation lib.espresso.core

    //Kotlin
    implementation lib.kotlin.standardLib
    implementation lib.kotlin.reflect


    //Material
    implementation lib.material.library

    //AndroidX
    implementation lib.androidx.appcompat

    //Artear
    implementation lib.artear.uiView
    implementation lib.artear.tools
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr',
                                'm', 'preview', 'b', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

group = publishedGroupId
version = libraryVersion

apply from: 'publication.gradle'
apply from: 'bintray.gradle'